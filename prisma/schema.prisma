generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                @id @default(autoincrement())
  email              String             @unique
  password           String
  nickname           String
  role               String             @default("user")
  name               String?
  gender             String?
  birth_date         String?
  login_type         String?            @default("email")
  status             String             @default("active") // suspended, withdrawn, inactive
  member_type        String             @default("10")
  last_logged_in     DateTime           @default(now())
  created_at         DateTime           @default(now())
  updated_at         DateTime           @default(now())
  memo               String?
  post               Post[]
  reply              Reply[]
  post_like          PostLike[]
  user_profile_image UserProfileImage[]

  @@map("users")
}

model Post {
  id               Int              @id @default(autoincrement())
  author           User             @relation(fields: [author_id], references: [id])
  author_id        Int
  content          String?
  tags             String[]
  mentioned_users  String[]
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now())
  status           String           @default("active")
  reply            Reply[]
  post_like        PostLike[]
  post_media_image PostMediaImage[]
  post_media_video PostMediaVideo?
  memo             String?

  @@map("post")
}

model UserProfileImage {
  id         Int      @id @default(autoincrement())
  url        String
  filename   String
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  expired_at DateTime @default(now())
  memo       String?
  user       User     @relation(references: [id], fields: [user_id])
  user_id    Int

  @@map("user_profile_image")
}

model Reply {
  id         Int      @id @default(autoincrement())
  author     User     @relation(fields: [author_id], references: [id])
  author_id  Int
  post       Post     @relation(fields: [post_id], references: [id])
  post_id    Int
  content    String?
  tags       String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  memo       String?

  @@map("reply")
}

model PostMediaImage {
  id         Int      @id @default(autoincrement())
  ord        Int      @default(0)
  media      Media    @relation(fields: [media_id], references: [id])
  media_id   Int      @unique
  post       Post     @relation(fields: [post_id], references: [id])
  post_id    Int
  created_at DateTime @default(now())

  @@map("post_media_image")
}

model PostMediaVideo {
  id         Int      @id @default(autoincrement())
  media      Media    @relation(fields: [media_id], references: [id])
  media_id   Int      @unique
  post       Post     @relation(fields: [post_id], references: [id])
  post_id    Int      @unique
  created_at DateTime @default(now())

  @@map("post_media_video")
}

model Media {
  id               Int             @id @default(autoincrement())
  url              String
  filename         String
  type             String? // "video" || "image"
  is_active        Boolean         @default(true)
  created_at       DateTime        @default(now())
  expired_at       DateTime        @default(now())
  memo             String?
  related_to       Json? // { table:'tablename', content_id: 'related table rowid'}
  post_media_image PostMediaImage?
  post_media_video PostMediaVideo?

  @@map("media")
}

model PostLike {
  id         Int      @id @default(autoincrement())
  post_id    Int
  post       Post     @relation(fields: [post_id], references: [id])
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())

  @@map("post_like")
}
